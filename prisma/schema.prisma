generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  firstName String
  lastName  String
  email     String   @unique
  username  String   @unique
  password  String
  posts     Post[]
  role      UserRole @default(USER)
  isActive  Boolean  @default(true)

  phone   String?
  address String?
  website String?
  bio     String?

  refreshToken        String?
  refreshTokenExpires DateTime?
  loginDevices        Json[]    @default([])
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
}

model Topic {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  slug        String  @unique
  description String?
  icon        String?
  color       String?
  coverImage  String?

  parentId String? @db.ObjectId
  parent   Topic?  @relation("TopicHierarchy", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children Topic[] @relation("TopicHierarchy")

  posts Post[]
  order Int    @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  title String
  slug  String @unique

  content     String?
  htmlContent String?
  contentType String?

  excerpt         String?
  coverImageUrl   String?
  previewImageUrl String?
  status          PostStatus @default(DRAFT)
  publishDate     DateTime?

  topicId String? @db.ObjectId
  topic   Topic?  @relation(fields: [topicId], references: [id])

  authorId String? @db.ObjectId
  author   User?   @relation(fields: [authorId], references: [id])

  order       Int       @default(0)
  postTags    PostTag[]
  readTime    Int       @default(1)
  readCount   Int       @default(0)
  isScheduled Boolean   @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tag {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  name     String    @unique
  postTags PostTag[]
}

model PostTag {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  postId String @db.ObjectId
  tagId  String @db.ObjectId
  post   Post   @relation(fields: [postId], references: [id])
  tag    Tag    @relation(fields: [tagId], references: [id])
}

enum PostStatus {
  DRAFT
  PUBLISHED
  SCHEDULED
  ARCHIVED
}

enum UserRole {
  ADMIN
  MODERATOR
  USER
  SUPERADMIN
}
